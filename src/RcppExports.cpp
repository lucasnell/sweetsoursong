// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// plant_metacomm_stoch_cpp
arma::mat plant_metacomm_stoch_cpp(const size_t& n_reps, const std::vector<double>& m, const std::vector<double>& d_yp, const std::vector<double>& d_b0, const std::vector<double>& d_bp, const std::vector<double>& g_yp, const std::vector<double>& g_b0, const std::vector<double>& g_bp, const std::vector<double>& L_0, const double& u, const double& X, const std::vector<double>& Y0, const std::vector<double>& B0, const double& n_sigma, const size_t& season_len, const double& season_surv, const double& q, const bool& open_sys, const double& dt, const double& max_t, const double& burnin, const size_t& save_every, const bool& begin_end, const int& summarize);
RcppExport SEXP _sweetsoursong_plant_metacomm_stoch_cpp(SEXP n_repsSEXP, SEXP mSEXP, SEXP d_ypSEXP, SEXP d_b0SEXP, SEXP d_bpSEXP, SEXP g_ypSEXP, SEXP g_b0SEXP, SEXP g_bpSEXP, SEXP L_0SEXP, SEXP uSEXP, SEXP XSEXP, SEXP Y0SEXP, SEXP B0SEXP, SEXP n_sigmaSEXP, SEXP season_lenSEXP, SEXP season_survSEXP, SEXP qSEXP, SEXP open_sysSEXP, SEXP dtSEXP, SEXP max_tSEXP, SEXP burninSEXP, SEXP save_everySEXP, SEXP begin_endSEXP, SEXP summarizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const size_t& >::type n_reps(n_repsSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type d_yp(d_ypSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type d_b0(d_b0SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type d_bp(d_bpSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type g_yp(g_ypSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type g_b0(g_b0SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type g_bp(g_bpSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type L_0(L_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const double& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Y0(Y0SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< const double& >::type n_sigma(n_sigmaSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type season_len(season_lenSEXP);
    Rcpp::traits::input_parameter< const double& >::type season_surv(season_survSEXP);
    Rcpp::traits::input_parameter< const double& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const bool& >::type open_sys(open_sysSEXP);
    Rcpp::traits::input_parameter< const double& >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const double& >::type max_t(max_tSEXP);
    Rcpp::traits::input_parameter< const double& >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< const size_t& >::type save_every(save_everySEXP);
    Rcpp::traits::input_parameter< const bool& >::type begin_end(begin_endSEXP);
    Rcpp::traits::input_parameter< const int& >::type summarize(summarizeSEXP);
    rcpp_result_gen = Rcpp::wrap(plant_metacomm_stoch_cpp(n_reps, m, d_yp, d_b0, d_bp, g_yp, g_b0, g_bp, L_0, u, X, Y0, B0, n_sigma, season_len, season_surv, q, open_sys, dt, max_t, burnin, save_every, begin_end, summarize));
    return rcpp_result_gen;
END_RCPP
}
// plant_metacomm_cpp
arma::mat plant_metacomm_cpp(const std::vector<double>& m, const std::vector<double>& d_yp, const std::vector<double>& d_b0, const std::vector<double>& d_bp, const std::vector<double>& g_yp, const std::vector<double>& g_b0, const std::vector<double>& g_bp, const std::vector<double>& L_0, const double& u, const double& X, const std::vector<double>& Y0, const std::vector<double>& B0, const bool& open_sys, const double& dt, const double& max_t);
RcppExport SEXP _sweetsoursong_plant_metacomm_cpp(SEXP mSEXP, SEXP d_ypSEXP, SEXP d_b0SEXP, SEXP d_bpSEXP, SEXP g_ypSEXP, SEXP g_b0SEXP, SEXP g_bpSEXP, SEXP L_0SEXP, SEXP uSEXP, SEXP XSEXP, SEXP Y0SEXP, SEXP B0SEXP, SEXP open_sysSEXP, SEXP dtSEXP, SEXP max_tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type d_yp(d_ypSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type d_b0(d_b0SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type d_bp(d_bpSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type g_yp(g_ypSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type g_b0(g_b0SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type g_bp(g_bpSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type L_0(L_0SEXP);
    Rcpp::traits::input_parameter< const double& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const double& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type Y0(Y0SEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< const bool& >::type open_sys(open_sysSEXP);
    Rcpp::traits::input_parameter< const double& >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< const double& >::type max_t(max_tSEXP);
    rcpp_result_gen = Rcpp::wrap(plant_metacomm_cpp(m, d_yp, d_b0, d_bp, g_yp, g_b0, g_bp, L_0, u, X, Y0, B0, open_sys, dt, max_t));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sweetsoursong_plant_metacomm_stoch_cpp", (DL_FUNC) &_sweetsoursong_plant_metacomm_stoch_cpp, 24},
    {"_sweetsoursong_plant_metacomm_cpp", (DL_FUNC) &_sweetsoursong_plant_metacomm_cpp, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_sweetsoursong(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
